##### First go to official website (https://git-scm.com/download/linux) and download git for linux os
I prefer Ubuntu linux so for the latest stable version, I used the following command:

# apt-get install git -y

**** Check whether git installed or not by using git --version command ********
 
##### After downloading and installing git, how can you start tracking project code???? by configuring it

$$$$ Every command in git starts with 'git'

***************** One time used commands or global configurations or parameters: 
To understand who has written a particular code in remote repo while multiple developers are working *********************

git config --global user.name "<github_account_name>"
git config --global user.email "<github_emailaddress>"
git config --list

Daily used commands
===================

git init : git will create 3 stages/areas internally which we can't see physically but exists in the backend

1. Working directory
2. Staging/Cache area
3. Local repository

git status  
git add <file_name> or git add . 

git commit -m "<message>"
git commit -am "<message>"
git commit --amend -am "<message>"  

git config --global alias.<alias_name> <git_command>

git log 
git shortlog
git log --all
git log --oneline 
git log --since <YYYY-MM-DD> --until <YYYY-MM-DD>
git log --author "<author_name>"
git log --grep "<key_word>"
git log -n
git log <file_name>
git log wc -l
git log --graph --decorate

git diff <old commit id>..<new commit id>
git show <commit id>     

vi .gitignore
*.txt
*.java
*.php
*.py
*.sh
*.net

<any filename starting with or not starting with any specific letter>
!c.*
d.*
[aeiou].*
!<wanted_file_name>.<any_ignored_extension>

git branch
git branch <branch_name>
git checkout <branch_name>
git branch -D/-d <branch_name>
git branch --move/-m <old_branch_name> <new_branch_name>
git checkout -b <new_branch_name>

git diff <target_branch>..<source_branch>
git merge <modified/source branch_name>

###################################### git merge conflict ##########################################################
when there's a different code or codes not matching inside the same file at same line/level on 2 different branches, 
then while merging the 2 branches a conflict will occur. In such case, first resolve the conflict then do merge.

git merge --abort

while solving merge conflict, no need to enter commit message::::::::: git commit

git cherry-pick <commit_id>

git reflog
git checkout -b <deleted branch_name> <HEAD>

git stash save "<message>"
git stash list
git stash apply <stash_id>
git stash pop <stash_id>
git stash drop 
git stash clear

git reset --soft <commit_id>
git reset --mixed <commit_id>
git reset --hard <commit_id>

git tag -a <tag_name> -m "message" <commit_id>
git tag

git mv <old_file_name> <new_file_name>
git rm <file_name>

git clean

########## DVCS:::: GIT HUB: CLOUD BASED APPLICATION , NO NEED TO MAINTAIN SERVER , ONLINE/REMOTE REPOSITORY ##############

* I'm understanding, is there any remote repositories that my local repository knows or not ?
** Do I have any communication with remote repositories or not ??
*** Am I connected to any remote repositories or not ???
**** Do I know any one remotely or not ????  

git remote

###### To establish a communication from your local repo to remote repo, we need to create a remote repo first #######
Public & Private repo (only 1 for free version)
then execute :::::::::::: git remote add origin <remote_repo_url>

******* If we want to talk to remote repo, then there should be a communication link or 
a channel to send data, that is origin ************************************************

git remote -v

git push -u origin master
username:Ganesh1493
password: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

Developer machine:
1. Working directory
2. Staging/Cache area
3. Local repository (master)

Because you've added a remote repository right now, a new area will be created that is
4. Local remote area (origin)

git branch -r
git branch -a

git diff <local_branchname>..<local_remote_branchname>

git fetch 

git checkout master
git merge <Local_remote_branch>

git pull (git fetch + git merge)

#####################################################################################################################################
* You are joining in an org as a new employee and you don't know anything what is happening in your project. Your manager has assigned 
  you a task and asked to work on a particular module
* You're not aware of anything about the project and you don't have any project code to work on. so you'll be provided  with the 
  project URL so you can copy the code
* If you want to start working on existing project, you need to have entire project code with you, then only you'll be working on it

How can you get entire project code ??????

git clone <online_repository_link>
creating a project directory in your local machine including branches&log files, going inside it, initializing also.

git revert HEAD <commit_id>

git push origin master <tag_name>

*Fork
*Delete a repository

****** Collaborator : working in a team together, giving permission to other employees/users to access the repository ************

* Creating repositories for different projects
** Managing the access of repository- Allowing new employees to access remote repositories where the project code is stored
*** Creating the branches as per the requirement
**** Understanding the requirement and creating branching strategies
***** resolving conflicts if any
****** collaborating with other development teams or other teams to resolve issues
